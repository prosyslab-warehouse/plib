
+============+
| TO BE DONE |
+============+

A tasks and bugs are now being tracked by sourceforge. Please 
goto: http://sourceforge.net/projects/plib/


  * Lines in ASCII files are terminated...

          With '\n' under UNIX/Linux
          With '\r' under MacOS
          With BOTH under Windoze.

    Hence, UNIX/Linux does no conversions of either '\r' or '\n'.
    and    MAC swaps '\r' and '\n' on input.
    and    Windoze dumps '\r' if it follows a '\n'.

    This is a mess - so I'm changing all the ASCII I/O code
    to allow either or both '\n' or '\r' and I'm reading the
    ASCII files in BINARY mode.
 
  * Array deletion requires '[]' after 'delete' on Mac.

  * Scaling really makes a mess of SSG bounding sphere tests

  * ssgLOS is really broken.

  * Some of the MSVC-project files for plib_examples seem to be 
    broken, for example some miss a "winmm.lib".

  * wk: Could someone, preferably a native english speaker, look
    over the new ssg-documentation?

  * Check whether the new ssgStripify works with TuxKart
    See Steves post from 11.12.2000 15:12 for a problem description



The abbreviation NIV14 means not in Version 1.4.






Bugs:
=====

- When creating fgfsTux, sometimes .ac, .dxf,
  .ase and .obj saved zero objects, although 
  there were objects. For example, PLIB 
	created this .ac file:
	----------- snip ------------
	AC3Db
	OBJECT world
	kids 0
	OBJECT group
	kids 0
	----------- snip ------------
	This seems to happen after ssgFlatten.
- Create a sphere in ppe. Save it as .ASE. See that values like
  diffuse colour are cr*p. Try to load it. It crashes. This could be 
  one or - probably - two bugs. I don't think this is a ppe problem. 
  The loader complains that number of faces is -2.
  The problem seems to be the writer.

	*new remark*: About the diffuse values: I think it has to do with
	colour material, a loader (.ASE?) loading colours into a colour
    list and writing colours from the ssgSimpleState where they are
    undefined. I think the same bug is in .AC Since I have uncommitted 
	.AC stuff on my private computer, please don't start major changes 
	to .AC loading/saving. But if someone wants to search for the bug 
	and fix	it in .ASE, you are very welcome.
- David Megginson bug list. Marten said 1, 2, 3, 4, 7 and 8 are now
  fixed. What's the status of the others?

- I have a crash in ssgFlatten if I load .ac files with 
  unused materials (not reproducable?)
- Loading and saving lines in .OBJ doesn't work. Maybe NIV14.
- There is still at least one path bug, maybe in ppe. It works 
  something like this (Grrr.. I should have written this down):
  Load an object into ppe, specifying the directory with an absolute 
  or relative path. Load another object from the same path. It has 
  happened to me that plib now doesn't find the textures. I will look 
  into this.

Working with ssg, especially the file loaders and writers leads
to problems very quickly, therefore the above list might just be a
part of the real number of bugs still in the code. Probably the real 
test will be whether one can work for an hour with plib and not find 
a new bug.
  
Misc:
=====

- Document ssgStats, getNumLines and getLine.
- Look whether scaling works. [see current discussion]
  If not and if we can't/don't want to make it work, for example 
  because of performance issues we need a warning in the docs and 
  IMHO PLIB should "write out" a warning if an unallowed matrix is
  sent to it.
- Rename CGlobalSimpleStateList in plib and ppe.
- Dave McClurgs new Net stuff: 
  One of the Linux persons should make it compilable and 
  test it.
- Search for todo, fix, fixme, kludge, Pfusch.
  I would suggest we mark things we have looked at and want to 
  do later with "NIV14".
- Reduce compiler warnings.
- Reduce lint warnings. I (wk) will try to this until 1.4. 
  It is important. Lint is an error checking tool that gives warnings 
  where things *could be* wrong as opposed to the compiler that tells 
  you where they are wrong.

- We should write the GetWrapU/GetWrapV function, since 
  loading /writing .ssg files can't work 100% without it.
- When saving, there is often a warning that "ref count doesn't 
  tally with parent count"
- Change all console output to ulSetError.
- Go through the mailing list for unfinished business.
- I (wk) am not sure 2D file format conversion works. I will look
  into this and will shout for help if I need some.
  Locally, I have put it into the .FLT loader also.
- Someone, preferably a native english speaker with ssg-knowledge,
  should go through my ssg-doc and fix any mistakes. It should be 
  fairly complete by now.
- Add Per's new Formats to the doc.
- For the other parts of plib, people should bring the doc up to 
  date.
- Go through both the task manager and the bug list on Sourceforge
  and look what needs to be done now, what can be done later and 
  mark the things already done as closed. For example, once we have 
  done the docs, we can close task number 18398 (for now).
  Has task number 18384 been done (Mac patches)?

Testing:
========

- More loader / writer testing. See
  my article on plib user, "does anyone use .ssg files?" from
  17.1.2001
- Automatically check PPE, all examples and probably tuxkart, tux_aqfh
  and toobular for memory leaks. MSVC has such a feature.
- WK: IMHO we should have fgfs, tuxkart, tux_aqfh and toobular compilable
  before releasing PLIB 1.4.0. AFAIK, fgfs compiles.
- Are all the plib-applications and examples still
  compilable and do they work?
  Especially, is the texture coordinate bug in Tux Racer gone?
- It would be nice if there was one or a few models that contain 
  all the (non-deprecated) features of plib, for example ssgVtxArray
  and ssgVtxTable with all the OpenGL types, textures of all formats,
  untextured faces, transparent/translucent faces etc. 
  To create this is no easy task.
- People from the other plib-parts should test their part and maybe 
  write lists what to test.
- Testing on "non-standard" operating systems and hardware.
  Especially interesting are 64 bit machines. And computers with
  the other endianess (sp?). That means mainly MACs, doesn't it?
  Darrell, are you listening ;-)?
- Test the current stripifier.

Releasing:
==========
- Update docs to the new state:
  Change version numbers.
  Create change history (?).
  Change "In the cvs you will find" to
  "In 1.4.0 you will find"
- Do the file release
- Announce it:
  On plib-announce
  On Sourceforge as news item
  On other web sites(?)

Probably after 1.4.0:
=====================
- In fgfsTux, not a large object, you get a DList overflow
  with the standard values for its size. Can we make its
  size dynamic?
- Look at handling of normals. For example, loaders, 
  stripify etc should only recalculate missing normals.
  Have *one* function that recalculates normals.



It would be nice if people would volunteer for tasks.

